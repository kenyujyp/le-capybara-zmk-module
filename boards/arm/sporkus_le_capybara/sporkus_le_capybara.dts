/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

/dts-v1/;
#include <st/f0/stm32f072Xb.dtsi>
#include <st/f0/stm32f072v(8-b)tx-pinctrl.dtsi>

#include <zephyr/dt-bindings/dt-util.h>
#include <zephyr/dt-bindings/adc/adc.h>

#include <dt-bindings/zmk/matrix_transform.h>

&adc1 {
	status = "okay";

	pinctrl-0 = <&adc_in2_pa2>;
	pinctrl-names = "default";

	#address-cells = <1>;
	#size-cells = <0>;

	st,adc-clock-source = <ASYNC>;
	st,adc-prescaler = <1>;

	channel@2 {
		reg = <2>;
		zephyr,gain = "ADC_GAIN_1";
		zephyr,reference = "ADC_REF_INTERNAL";
		zephyr,acquisition-time = <ADC_ACQ_TIME_DEFAULT>;
		zephyr,resolution = <12>;
	};
};

&pinctrl {
    ec_pin1: ec_pin1 {
        pinmux = <STM32_PINMUX('A', 3, GPIO)>;

        slew-rate = "very-high-speed";
    };

    ec_pin2: ec_pin2 {
        pinmux = <STM32_PINMUX('A', 5, GPIO)>;

        slew-rate = "very-high-speed";
    };

    ec_pin3: ec_pin3 {
        pinmux = <STM32_PINMUX('A', 7, GPIO)>;

        slew-rate = "very-high-speed";
    };

    ec_pin4: ec_pin4 {
        pinmux = <STM32_PINMUX('B', 1, GPIO)>;

        slew-rate = "very-high-speed";
    };
};

#define EC_MATRIX(_name, _bottom_mask)                     \
    _name: _name {                                         \
        pinctrl-0 = <&ec_pin1 &ec_pin2 &ec_pin3 &ec_pin4>; \
        pinctrl-names = "default";                         \
        compatible = "zmk,kscan-ec-matrix";                \
        input-gpios                                        \
            = <&left_mux 0 0>                              \
            , <&left_mux 1 0>                              \
            , <&left_mux 2 0>                              \
            , <&left_mux 3 0>                              \
            , <&left_mux 4 0>                              \
            , <&right_mux 2 0>                             \
            , <&right_mux 4 0>                             \
            , <&right_mux 6 0>                             \
            , <&right_mux 7 0>                             \
            , <&right_mux 5 0>                             \
        ;                                                  \
        strobe-gpios                                       \
            = <&gpioa 3 GPIO_ACTIVE_HIGH>                  \
            , <&gpioa 5 GPIO_ACTIVE_HIGH>                  \
            , <&gpioa 7 GPIO_ACTIVE_HIGH>                  \
            , <&gpiob 1 GPIO_ACTIVE_HIGH>                  \
            ;                                              \
        io-channels = <&adc1 2>;                           \
        matrix-relax-us = <1>;                             \
        strobe-input-masks = <0 0 0 _bottom_mask>;         \
        drain-gpios = <&gpioa 1 GPIO_OPEN_DRAIN>;          \
    };

/ {
    model = "Le Capybara";
    compatible = "sporkus,le_capybara", "st,stm32f072";

    chosen {
        zephyr,sram = &sram0;
        zephyr,flash = &flash0;
        zmk,kscan = &matrix;
        zmk,matrix_transform = &transform;
        /* TODO: Enable once we support the IC for underglow
        zmk,underglow = &led_strip;
         */
    };

    transform: transform {
        compatible = "zmk,matrix-transform";
        rows = <4>;
        columns = <10>;

        map = <
        RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4)     RC(0,5) RC(0,6) RC(0,7) RC(0,8) RC(0,9)
        RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4)     RC(1,5) RC(1,6) RC(1,7) RC(1,8) RC(1,9)
        RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4)     RC(2,5) RC(2,6) RC(2,7) RC(2,8) RC(2,9)
                        RC(3,1)     RC(3,3)             RC(3,6)     RC(3,8)
        >;
    };

    thirty_six_transform: thirty_six_transform {
        compatible = "zmk,matrix-transform";
        rows = <4>;
        columns = <10>;

        map = <
        RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4)     RC(0,5) RC(0,6) RC(0,7) RC(0,8) RC(0,9)
        RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4)     RC(1,5) RC(1,6) RC(1,7) RC(1,8) RC(1,9)
        RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4)     RC(2,5) RC(2,6) RC(2,7) RC(2,8) RC(2,9)
                        RC(3,1) RC(3,2) RC(3,3)     RC(3,6) RC(3,7) RC(3,8)
        >;
    };

    left_mux: left_mux {
    	compatible = "zmk,gpio-mux";

        select-gpios
            = <&gpiob 15 GPIO_ACTIVE_HIGH>
            , <&gpiob 14 GPIO_ACTIVE_HIGH>
            , <&gpiob 13 GPIO_ACTIVE_HIGH>
            ;

        en-gpios = <&gpioa 8 GPIO_ACTIVE_LOW>;

        gpio-controller;
        #gpio-cells = <2>;
    };

    right_mux: right_mux {
    	compatible = "zmk,gpio-mux";

        select-gpios
            = <&gpiob 15 GPIO_ACTIVE_HIGH>
            , <&gpiob 14 GPIO_ACTIVE_HIGH>
            , <&gpiob 13 GPIO_ACTIVE_HIGH>
            ;

        en-gpios = <&gpioc 14 GPIO_ACTIVE_LOW>;

        gpio-controller;
        #gpio-cells = <2>;
    };

    EC_MATRIX(matrix, (BIT(0) + BIT(2) + BIT(4) + BIT(5) + BIT(7) + BIT(9)))
    EC_MATRIX(thirty_six_matrix, (BIT(0) + BIT(4) + BIT(5) + BIT(9)))
};

&thirty_six_matrix {
	status = "disabled";
};

zephyr_udc0: &usb {
    status = "okay";

    pinctrl-0 = <&usb_dm_pa11 &usb_dp_pa12>;
    pinctrl-names = "default";

    // Overriden to lower RAM usage.
    num-bidir-endpoints = <4>;
};

// Enable all the clocks!
&clk_lsi {
    status = "okay";
};

&clk_hsi48 {
    status = "okay";
};

// Enable this clock so we can use async 14MHz ADC clock
&clk_hsi14 {
    status = "okay";
};

&clk_hsi {
    status = "okay";
};

&pll {
    prediv = <1>;
    mul = <6>;
    clocks = <&clk_hsi>;
    status = "okay";
};

&rcc {
    clocks = <&pll>;
    clock-frequency = <DT_FREQ_M(48)>;
    ahb-prescaler = <1>;
    apb1-prescaler = <1>;
};

&rtc {
    status = "okay";
};

&flash0 {
    /*
     * For more information, see:
     * http: //docs.zephyrproject.org/latest/guides/dts/index.html#flash-partitions
     */
    partitions {
        compatible = "fixed-partitions";
        #address-cells = <1>;
        #size-cells = <1>;

        /* Set 6Kb of storage at the end of the 128Kb of flash */
        storage_partition: partition@1e800 {
            label = "storage";
            reg = <0x0001e800 DT_SIZE_K(6)>;
        };
    };
};
